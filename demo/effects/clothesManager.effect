
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        resolution: { value: [0., 0.], editor: { visible: false } }

        
        position_0: { value: [0., 0.], editor: { visible: false } }
        size_0: { value: [0., 0.], editor: { visible: false } }
        angle_0: { value: 0., editor: { visible: false } }
        flipHorizontal_0: { value: 0., editor: { visible: false } }
        flipVertical_0: { value: 0., editor: { visible: false } }
        tint_0: { value: [1., 1., 1., 1.], editor: { type: color, visible: false} }
        texture_0: { value: white, editor: { visible: false } }
				
        position_1: { value: [0., 0.], editor: { visible: false } }
        size_1: { value: [0., 0.], editor: { visible: false } }
        angle_1: { value: 0., editor: { visible: false } }
        flipHorizontal_1: { value: 0., editor: { visible: false } }
        flipVertical_1: { value: 0., editor: { visible: false } }
        tint_1: { value: [1., 1., 1., 1.], editor: { type: color, visible: false} }
        texture_1: { value: white, editor: { visible: false } }
				
        position_2: { value: [0., 0.], editor: { visible: false } }
        size_2: { value: [0., 0.], editor: { visible: false } }
        angle_2: { value: 0., editor: { visible: false } }
        flipHorizontal_2: { value: 0., editor: { visible: false } }
        flipVertical_2: { value: 0., editor: { visible: false } }
        tint_2: { value: [1., 1., 1., 1.], editor: { type: color, visible: false} }
        texture_2: { value: white, editor: { visible: false } }
				
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #include <builtin/uniforms/cc-local>

  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 v_light;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);
    pos = cc_matWorld * pos;
    pos = cc_matViewProj * pos;
    uv0 = a_texCoord;
    v_light = a_color;
    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/alpha-test>

  in vec4 v_light;
  in vec2 uv0;
  #pragma builtin(local)
  layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;

  
  uniform sampler2D texture_0;
  uniform sampler2D texture_1;
  uniform sampler2D texture_2;

  uniform Settings {
    
    vec4 tint_0;
    vec4 tint_1;
    vec4 tint_2;
    vec2 resolution;

    vec2 position_0;
    vec2 position_1;
    vec2 position_2;

    vec2 size_0;
    vec2 size_1;
    vec2 size_2;

    float flipHorizontal_0;
    float flipHorizontal_1;
    float flipHorizontal_2;

    float flipVertical_0;
    float flipVertical_1;
    float flipVertical_2;

    float angle_0;
    float angle_1;
    float angle_2;
  };
    
  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);
    o *= texture(cc_spriteTexture, uv0);
    o *= v_light;
    
    vec2 absUV = uv0 * resolution;
    vec2 position;
    vec2 size;
    float angle;

    
    position = position_0;
    size = size_0;
    angle = angle_0;

    if (size.x > 0. && size.y > 0.) {
      vec2 rotSize = size;
      if (angle == 90.) { rotSize = vec2(size.y, size.x); }
      vec4 limits = vec4(position.x - 1., position.x + rotSize.x + 1., position.y - 1., position.y + rotSize.y + 1.);

      if (absUV.x >= limits.r && absUV.x <= limits.g && absUV.y >= limits.b && absUV.y <= limits.a) {
        vec2 uv = vec2((absUV.x - position.x) / rotSize.x, (absUV.y - position.y) / rotSize.y);
        if (angle == 90.) {
          uv = vec2(1. - (absUV.y - position.y) / rotSize.y, (absUV.x - position.x) / rotSize.x);
        }

        if (flipHorizontal_0 == 1.) uv = vec2(1. - uv.x, uv.y);
        if (flipVertical_0 == 1.) uv = vec2(uv.x, 1. - uv.y);

        vec4 wearColor = texture(texture_0, uv) * tint_0;
        if (o.a == 0. || wearColor.a == 1.) {
          o = wearColor;
        } else if (wearColor.a != 0.) {
          o = mix(o, wearColor, wearColor.a);
        }
      }
    }

    position = position_1;
    size = size_1;
    angle = angle_1;

    if (size.x > 0. && size.y > 0.) {
      vec2 rotSize = size;
      if (angle == 90.) { rotSize = vec2(size.y, size.x); }
      vec4 limits = vec4(position.x - 1., position.x + rotSize.x + 1., position.y - 1., position.y + rotSize.y + 1.);

      if (absUV.x >= limits.r && absUV.x <= limits.g && absUV.y >= limits.b && absUV.y <= limits.a) {
        vec2 uv = vec2((absUV.x - position.x) / rotSize.x, (absUV.y - position.y) / rotSize.y);
        if (angle == 90.) {
          uv = vec2(1. - (absUV.y - position.y) / rotSize.y, (absUV.x - position.x) / rotSize.x);
        }

        if (flipHorizontal_1 == 1.) uv = vec2(1. - uv.x, uv.y);
        if (flipVertical_1 == 1.) uv = vec2(uv.x, 1. - uv.y);

        vec4 wearColor = texture(texture_1, uv) * tint_1;
        if (o.a == 0. || wearColor.a == 1.) {
          o = wearColor;
        } else if (wearColor.a != 0.) {
          o = mix(o, wearColor, wearColor.a);
        }
      }
    }

    position = position_2;
    size = size_2;
    angle = angle_2;

    if (size.x > 0. && size.y > 0.) {
      vec2 rotSize = size;
      if (angle == 90.) { rotSize = vec2(size.y, size.x); }
      vec4 limits = vec4(position.x - 1., position.x + rotSize.x + 1., position.y - 1., position.y + rotSize.y + 1.);

      if (absUV.x >= limits.r && absUV.x <= limits.g && absUV.y >= limits.b && absUV.y <= limits.a) {
        vec2 uv = vec2((absUV.x - position.x) / rotSize.x, (absUV.y - position.y) / rotSize.y);
        if (angle == 90.) {
          uv = vec2(1. - (absUV.y - position.y) / rotSize.y, (absUV.x - position.x) / rotSize.x);
        }

        if (flipHorizontal_2 == 1.) uv = vec2(1. - uv.x, uv.y);
        if (flipVertical_2 == 1.) uv = vec2(uv.x, 1. - uv.y);

        vec4 wearColor = texture(texture_2, uv) * tint_2;
        if (o.a == 0. || wearColor.a == 1.) {
          o = wearColor;
        } else if (wearColor.a != 0.) {
          o = mix(o, wearColor, wearColor.a);
        }
      }
    }


    ALPHA_TEST(o);
    return o;
  }
}%